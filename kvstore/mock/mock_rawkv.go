// Code generated by MockGen. DO NOT EDIT.
// Source: ./kvstore/rawkv_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	rawkv "github.com/tikv/client-go/v2/rawkv"
)

// MockRawKVClientInterface is a mock of RawKVClientInterface interface.
type MockRawKVClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRawKVClientInterfaceMockRecorder
}

// MockRawKVClientInterfaceMockRecorder is the mock recorder for MockRawKVClientInterface.
type MockRawKVClientInterfaceMockRecorder struct {
	mock *MockRawKVClientInterface
}

// NewMockRawKVClientInterface creates a new mock instance.
func NewMockRawKVClientInterface(ctrl *gomock.Controller) *MockRawKVClientInterface {
	mock := &MockRawKVClientInterface{ctrl: ctrl}
	mock.recorder = &MockRawKVClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRawKVClientInterface) EXPECT() *MockRawKVClientInterfaceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRawKVClientInterface) Delete(ctx context.Context, key []byte, options ...rawkv.RawOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRawKVClientInterfaceMockRecorder) Delete(ctx, key interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRawKVClientInterface)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockRawKVClientInterface) Get(ctx context.Context, key []byte, options ...rawkv.RawOption) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRawKVClientInterfaceMockRecorder) Get(ctx, key interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRawKVClientInterface)(nil).Get), varargs...)
}

// Put mocks base method.
func (m *MockRawKVClientInterface) Put(ctx context.Context, key, value []byte, options ...rawkv.RawOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key, value}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockRawKVClientInterfaceMockRecorder) Put(ctx, key, value interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key, value}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockRawKVClientInterface)(nil).Put), varargs...)
}

// PutWithTTL mocks base method.
func (m *MockRawKVClientInterface) PutWithTTL(ctx context.Context, key, value []byte, ttl uint64, options ...rawkv.RawOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key, value, ttl}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutWithTTL", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutWithTTL indicates an expected call of PutWithTTL.
func (mr *MockRawKVClientInterfaceMockRecorder) PutWithTTL(ctx, key, value, ttl interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key, value, ttl}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutWithTTL", reflect.TypeOf((*MockRawKVClientInterface)(nil).PutWithTTL), varargs...)
}

// Scan mocks base method.
func (m *MockRawKVClientInterface) Scan(ctx context.Context, startKey, endKey []byte, limit int, options ...rawkv.RawOption) ([][]byte, [][]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, startKey, endKey, limit}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].([][]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Scan indicates an expected call of Scan.
func (mr *MockRawKVClientInterfaceMockRecorder) Scan(ctx, startKey, endKey, limit interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, startKey, endKey, limit}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRawKVClientInterface)(nil).Scan), varargs...)
}
